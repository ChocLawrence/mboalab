{"version":3,"sources":["./src/app/components/pages/password-reset/password-reset.component.html","./src/app/components/pages/password-reset/password-reset.component.ts","./src/app/components/pages/password-reset/password-reset-routing.module.ts","./src/app/components/pages/password-reset/password-reset.module.ts"],"names":[],"mappings":"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","file":"components-pages-password-reset-password-reset-module-ngfactory.js","sourcesContent":["<section class=\"conatct-section section-gap\">\n  <div class=\"container security\">\n    <div class=\"contact-form-area wow fadeInUp\" data-wow-delay=\"0.3s\">\n      <div class=\"row\">\n        <div class=\"col-lg-5 photo\">\n          <div class=\"contact-thumb mb-md-gap-50\">\n            <img src=\"/assets/img/security.jpg\" alt=\"img\" *ngIf=\"!verification\"/>\n            <img src=\"/assets/img/new-password.jpg\" alt=\"img\" *ngIf=\"verification\"/>\n          </div>\n        </div>\n        <div class=\"col\" *ngIf=\"!verification\">\n          <div class=\"contact-form\">\n            <form\n              id=\"resetForm\"\n              [formGroup]=\"resetForm\"\n              (ngSubmit)=\"onSubmitReset()\"\n            >\n              <h3 class=\"form-title\">\n                Forgot your password? <br />\n                No worries. We got you. <i class=\"fa fa-lock\"></i>\n              </h3>\n              <p>Enter your account's email below.</p>\n              <div class=\"row mt-5\" [attr.disabled]=\"loading\">\n                <div class=\"col-lg-12\">\n                  <div class=\"input-group mt-30\">\n                    <input\n                      type=\"email\"\n                      placeholder=\"Email Here\"\n                      name=\"email\"\n                      formControlName=\"email\"\n                      required\n                    />\n                    <span class=\"icon\"\n                      ><i class=\"fal fa-envelope-open\"></i\n                    ></span>\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <div class=\"input-group textarea-group mt-30\">\n                    <button\n                      type=\"submit\"\n                      class=\"\n                        btn btn-block\n                        login-btn\n                        main-btn\n                        small-size\n                        rounded-btn\n                        icon-right\n                      \"\n                      [disabled]=\"!resetFormIsValid() || loading\"\n                    >\n                      Reset\n                      <i class=\"fal fa-long-arrow-right\" *ngIf=\"!loading\"></i>\n                      &nbsp;\n                      <div\n                        class=\"spinner-border float-right\"\n                        role=\"status\"\n                        *ngIf=\"loading\"\n                      >\n                        <span class=\"sr-only\">Loading...</span>\n                      </div>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n        <div class=\"col\" *ngIf=\"verification\">\n          <div class=\"contact-form\">\n            <form\n              id=\"resetForm\"\n              [formGroup]=\"changePasswordForm\"\n              (ngSubmit)=\"onSubmitChangePassword()\"\n            >\n              <h3 class=\"form-title\">\n                Reset Wizard<br />\n                Setup new password. <i class=\"fa fa-lock\"></i>\n              </h3>\n              <p>Enter your new password and confirm below.</p>\n              <div class=\"row mt-5\" [attr.disabled]=\"loading\">\n                <div class=\"col-lg-12\">\n                  <div class=\"input-group mt-30\">\n                    <input\n                      type=\"password\"\n                      placeholder=\"Enter new password\"\n                      name=\"password\"\n                      formControlName=\"password\"\n                      required\n                    />\n                    <span class=\"icon\"><i class=\"fal fa-lock\"></i></span>\n                  </div>\n                </div>\n                <div class=\"col-lg-12\">\n                  <div class=\"input-group mt-30\">\n                    <input\n                      type=\"password\"\n                      placeholder=\"Confirm new password\"\n                      name=\"password\"\n                      formControlName=\"confirmPassword\"\n                      required\n                    />\n                    <span class=\"icon\"><i class=\"fal fa-lock\"></i></span>\n                  </div>\n                </div>\n                <div class=\"col-12\">\n                  <div class=\"input-group textarea-group mt-30\">\n                    <button\n                      type=\"submit\"\n                      class=\"\n                        btn btn-block\n                        login-btn\n                        main-btn\n                        small-size\n                        rounded-btn\n                        icon-right\n                      \"\n                      [disabled]=\"!changePasswordFormIsValid() || loading\"\n                    >\n                      Submit\n                      <i class=\"fal fa-long-arrow-right\" *ngIf=\"!loading\"></i>\n                      &nbsp;\n                      <div\n                        class=\"spinner-border float-right\"\n                        role=\"status\"\n                        *ngIf=\"loading\"\n                      >\n                        <span class=\"sr-only\">Loading...</span>\n                      </div>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div\n    class=\"conatct-one-bg\"\n    [style.background-image]=\"'url(/assets/img/security.jpg)'\"\n  ></div>\n</section>\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { CoreService } from '../../../core/core.service';\nimport { Router, NavigationEnd } from \"@angular/router\";\nimport { FormBuilder, Validators, FormGroup, FormArray } from '@angular/forms';\nimport { AuthenticationService } from '../../../services/authentication.service';\n@Component({\n  selector: 'app-password-reset',\n  templateUrl: './password-reset.component.html',\n  styleUrls: ['./password-reset.component.css']\n})\nexport class PasswordResetComponent implements OnInit {\n\n  public loading = false;\n  public state: any;\n  public resetId: any;\n  public verification = false;\n  resetForm: FormGroup;\n  changePasswordForm: FormGroup;\n\n  constructor(public core: CoreService,\n    public router: Router,\n    private fb: FormBuilder, private authenticationservice: AuthenticationService) {\n    this.resetForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n\n    this.changePasswordForm = this.fb.group({\n      password: ['', [Validators.required]],\n      confirmPassword: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.processReset();\n  }\n\n  onSubmitReset() {\n\n    if (this.resetFormIsValid() && this.core.checkIfOnline()) {\n      this.loading = true;\n      let values = this.resetForm.value;\n\n      this.authenticationservice.resetPassword(values).then(r => {\n        this.core.showSuccess(\"Success\", \"Check Email for reset link...\");\n        //localStorage.setItem(\"page\",\"menu\");\n        setTimeout(function () {\n          window.location.href = \"/login\";\n        }, 2000);\n        this.resetForm.reset();\n        this.loading = false;\n\n      }).catch(e => {\n        this.loading = false;\n        this.core.handleError(e);\n      });\n\n    }\n\n    return false;\n\n  }\n\n  onSubmitChangePassword() {\n    if (this.changePasswordFormIsValid() && this.core.checkIfOnline()) {\n      this.loading = true;\n      let values = this.changePasswordForm.value;\n      values.resetPasswordToken = this.resetId;\n\n      this.authenticationservice.resetPasswordNow(values).then(r => {\n        this.core.showSuccess(\"Success\", \"Password reset successfully\");\n        setTimeout(function () {\n          window.location.href = \"/login\";\n        }, 3000);\n        this.changePasswordForm.reset();\n        this.loading = false;\n\n      }).catch(e => {\n        this.loading = false;\n        this.core.handleError(e);\n      });\n\n    }\n\n    return false;\n  }\n\n  async processReset() {\n    //check current url\n    let splitUrl = this.router.url.split('/');\n    this.state = splitUrl[2];\n    this.resetId = splitUrl[3];\n\n    if (!this.core.isEmptyOrNull(this.resetId) && this.state == 'change') {\n\n      await this.verifyResetId(this.resetId);\n\n    }\n\n\n  }\n\n\n  async verifyResetId(id: string) {\n\n    this.loading = true;\n\n    await this.authenticationservice\n      .verifyResetId(id)\n      .then(res => {\n        this.loading = false;\n        this.verification = true;\n      })\n      .catch(e => {\n        this.loading = false;\n        this.verification = false;\n        this.core.handleError(e);\n        this.redirectToLogin();\n      });\n\n  }\n\n  redirectToLogin() {\n    this.core.showSuccess('Success', 'Redirecting to login..')\n    this.router.navigate([\"/login\"]);\n  }\n\n  resetFormIsValid() {\n    return this.resetForm.controls.email.valid;\n  }\n\n  changePasswordFormIsValid() {\n    return this.changePasswordForm.controls.password.valid\n      && this.changePasswordForm.controls.confirmPassword.valid\n      && this.passwordsMatch();\n  }\n\n  passwordsMatch() {\n    return this.changePasswordForm.controls.password.value == this.changePasswordForm.controls.confirmPassword.value;\n  }\n\n}\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PasswordResetComponent } from './password-reset.component';\n\nconst routes: Routes = [{ path: '', component: PasswordResetComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PasswordResetRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrModule } from 'ngx-toastr';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { PasswordResetRoutingModule } from './password-reset-routing.module';\nimport { PasswordResetComponent } from './password-reset.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [PasswordResetComponent],\n  imports: [\n    CommonModule,\n    PasswordResetRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n    ToastrModule.forRoot({\n      timeOut: 10000,\n      positionClass: 'toast-top-right',\n      preventDuplicates: true,\n    }),\n    FormsModule,\n    NgbModule\n  ]\n})\nexport class PasswordResetModule { }\n"],"sourceRoot":"webpack:///"}