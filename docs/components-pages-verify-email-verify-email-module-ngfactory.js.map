{"version":3,"sources":["./src/app/components/pages/verify-email/verify-email.module.ts","./src/app/components/pages/verify-email/verify-email-routing.module.ts","./src/app/components/pages/verify-email/verify-email.component.ts","./src/app/components/pages/verify-email/verify-email.component.html","./src/app/services/emails.service.ts"],"names":[],"mappings":"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","file":"components-pages-verify-email-verify-email-module-ngfactory.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { ToastrModule } from 'ngx-toastr';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { VerifyEmailRoutingModule } from './verify-email-routing.module';\nimport { VerifyEmailComponent } from './verify-email.component';\nimport { SharedModule } from '../../shared/shared.module';\n\n@NgModule({\n  declarations: [VerifyEmailComponent],\n  imports: [\n    CommonModule,\n    VerifyEmailRoutingModule,\n    SharedModule,\n    ReactiveFormsModule,\n    ToastrModule.forRoot({\n      timeOut: 10000,\n      positionClass: 'toast-top-right',\n      preventDuplicates: true,\n    }),\n    FormsModule,\n    NgbModule\n  ]\n})\nexport class VerifyEmailModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { VerifyEmailComponent } from './verify-email.component';\n\nconst routes: Routes = [{ path: '', component: VerifyEmailComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class VerifyEmailRoutingModule { }\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { CoreService } from '../../../core/core.service';\nimport { Router, NavigationEnd } from \"@angular/router\";\nimport { FormBuilder, Validators, FormGroup, FormArray } from '@angular/forms';\nimport { EmailsService } from '../../../services/emails.service';\n\n@Component({\n  selector: 'app-verify-email',\n  templateUrl: './verify-email.component.html',\n  styleUrls: ['./verify-email.component.css']\n})\nexport class VerifyEmailComponent implements OnInit {\n  public display: any;\n  public loading = false;\n  public verification = false;\n  public state: any;\n  public verificationId: any;\n\n  constructor(public core: CoreService,\n    public router: Router,\n    private fb: FormBuilder, private emailsService: EmailsService) { }\n\n  ngOnInit(): void {\n    this.processVerification();\n  }\n\n\n  async processVerification() {\n    //check current url\n    let splitUrl = this.router.url.split('/');\n    this.verificationId = splitUrl[2];\n\n    if (!this.core.isEmptyOrNull(this.verificationId)) {\n\n      await this.verifyEmail(this.verificationId);\n\n    } else {\n      this.redirectToLogin();\n    }\n\n\n  }\n\n  async verifyEmail(id: string) {\n\n    this.loading = true;\n\n    await this.emailsService\n      .verifyEmail(id)\n      .then(res => {\n        this.loading = false;\n        this.verification = true;\n        this.timer(2);\n      })\n      .catch(e => {\n        this.loading = false;\n        this.verification = false;\n        this.timer(1);\n        this.core.handleError(e);\n      });\n\n  }\n\n  timer(minute: any) {\n    // let minute = 1;\n    let seconds: number = minute * 10;\n    let textSec: any = \"0\";\n    let statSec: number = 11;\n\n    const prefix = minute < 10 ? \"0\" : \"\";\n\n    const timer = setInterval(() => {\n      seconds--;\n      if (statSec != 0) statSec--;\n      else statSec = 10;\n\n      if (statSec < 10) {\n        textSec = \"0\" + statSec;\n      } else textSec = statSec;\n\n      this.display = `${prefix}${Math.floor(seconds / 60)}:${textSec}`;\n\n      if (seconds == 0) {\n        this.redirectToLogin();\n        clearInterval(timer);\n      }\n    }, 1000);\n  }\n\n  redirectToLogin() {\n    this.core.showSuccess('Success', 'Redirecting to login..')\n    this.router.navigate([\"/login\"]);\n  }\n\n\n\n}\n\n","<body>\n  <div class=\"row justify-content-center text-center mt-5\">\n    <img src=\"/assets/img/logo-2.png\" alt=\"\" width=\"150\" />\n  </div>\n  <div class=\"card holder\">\n    <div\n      style=\"\n        border-radius: 200px;\n        height: 200px;\n        width: 200px;\n        background: #f8faf5;\n        margin: 0 auto;\n      \"\n    >\n      <img\n        src=\"/assets/img/emailverified.gif\"\n        alt=\"\"\n        width=\"\"\n        *ngIf=\"verification\"\n      />\n      <img src=\"/assets/img/500.gif\" alt=\"\" width=\"\" *ngIf=\"!verification\" />\n    </div>\n    <span *ngIf=\"verification\">\n      <h3 class=\"mt-4\">Email verified successfully</h3>\n      <p>Continue using MboaLab</p>\n\n      <button routerLink=\"/login\" class=\"mt-4 btn btn-dark btn-lg btn-block\">\n        Continue\n      </button>\n    </span>\n    <span *ngIf=\"!verification\">\n      <h3 class=\"mt-4 red\">An error occured.</h3>\n\n      <button routerLink=\"/\" class=\"mt-4 btn btn-dark btn-lg btn-block\">\n        Home\n      </button>\n    </span>\n  </div>\n</body>\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { UrlsService } from \"../core/urls.service\";\nimport { CoreService } from \"../core/core.service\";\nimport { CustomHttpParamEncoder } from \"../core/custom-http-param-encoder\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n  }),\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailsService {\n\n  public apiUrl: string;\n  public httpOptions;\n\n  constructor(\n    private http: HttpClient,\n    private urlService: UrlsService,\n    public core: CoreService\n  ) {\n\n    this.apiUrl = `${this.urlService.apiUrl}` + 'emails/';\n    this.httpOptions = this.core.httpOptions;\n  }\n\n\n  getEmails(\n  ): Promise<any> {\n    let url = this.apiUrl;\n    return this.core.makeRemoteRequest(url, \"get\", null, httpOptions);\n  }\n\n\n  /** PUT: update a currenciess basic data  */\n  addEmail(dataObject: any): Promise<any> {\n    let url = this.apiUrl + 'email';\n\n    let params = new FormData();\n\n    // These parameters are always passed\n    if (!this.core.isEmptyOrNull(dataObject.email)) {\n      params.append(\"email\", dataObject.email);\n    }\n\n    if (!this.core.isEmptyOrNull(dataObject.primary)) {\n      params.append(\"primary\", dataObject.primary);\n    }\n\n    return this.core.makeRemoteRequest(url, \"post\", params, this.httpOptions);\n  }\n\n\n\n\n  getSingleEmail(id: any\n  ): Promise<any> {\n    let url = this.apiUrl + id;\n\n    return this.core.makeRemoteRequest(url, \"get\", null, httpOptions);\n  }\n\n  /** PUT: update a currenciess basic data  */\n  updateEmail(dataObject: any, id: any): Promise<any> {\n    let url = this.apiUrl + 'up-email/' + id;\n\n    let params = new FormData();\n\n    // These parameters are always passed\n    if (!this.core.isEmptyOrNull(dataObject.email)) {\n      params.append(\"email\", dataObject.email);\n    }\n\n    return this.core.makeRemoteRequest(url, \"put\", params, null);\n  }\n\n\n  verifyEmail(id: any): Promise<any> {\n    let url = this.apiUrl + 'verify-email/' + id;\n\n    return this.core.makeRemoteRequest(url, \"get\", null, httpOptions);\n  }\n\n\n  /** PUT: update a currenciess basic data  */\n  setPrimaryEmail(id: any): Promise<any> {\n    let url = this.apiUrl + 'set-primary/' + id;\n\n    return this.core.makeRemoteRequest(url, \"put\", null, null);\n  }\n\n\n  /** DELETE: delete a currencies  */\n  deleteEmail(id: any): Promise<any> {\n    let url = '';\n\n    // let params = new HttpParams({ encoder: new CustomHttpParamEncoder() });\n    if (!this.core.isEmptyOrNull(id)) {\n      url = this.apiUrl + 'del-email/' + id;\n    }\n\n    return this.core.makeRemoteRequest(url, \"delete\", null, this.httpOptions);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}